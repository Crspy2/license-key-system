// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.3
// source: user.proto

package protofiles

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	User_CreateUser_FullMethodName       = "/protofiles.User/CreateUser"
	User_GetUser_FullMethodName          = "/protofiles.User/GetUser"
	User_SearchUserStream_FullMethodName = "/protofiles.User/SearchUserStream"
	User_ListUsersStream_FullMethodName  = "/protofiles.User/ListUsersStream"
	User_ResetHardwareId_FullMethodName  = "/protofiles.User/ResetHardwareId"
	User_ResetPassword_FullMethodName    = "/protofiles.User/ResetPassword"
	User_BanUser_FullMethodName          = "/protofiles.User/BanUser"
	User_RevokeBan_FullMethodName        = "/protofiles.User/RevokeBan"
)

// UserClient is the client API for User service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserClient interface {
	CreateUser(ctx context.Context, in *UserCreateRequest, opts ...grpc.CallOption) (*UserObject, error)
	GetUser(ctx context.Context, in *UserIdRequest, opts ...grpc.CallOption) (*UserObject, error)
	SearchUserStream(ctx context.Context, in *UserNameRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[UserObject], error)
	ListUsersStream(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (grpc.ServerStreamingClient[UserObject], error)
	ResetHardwareId(ctx context.Context, in *UserIdRequest, opts ...grpc.CallOption) (*StandardResponse, error)
	ResetPassword(ctx context.Context, in *UserIdRequest, opts ...grpc.CallOption) (*StandardResponse, error)
	BanUser(ctx context.Context, in *UserIdRequest, opts ...grpc.CallOption) (*StandardResponse, error)
	RevokeBan(ctx context.Context, in *UserIdRequest, opts ...grpc.CallOption) (*StandardResponse, error)
}

type userClient struct {
	cc grpc.ClientConnInterface
}

func NewUserClient(cc grpc.ClientConnInterface) UserClient {
	return &userClient{cc}
}

func (c *userClient) CreateUser(ctx context.Context, in *UserCreateRequest, opts ...grpc.CallOption) (*UserObject, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserObject)
	err := c.cc.Invoke(ctx, User_CreateUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) GetUser(ctx context.Context, in *UserIdRequest, opts ...grpc.CallOption) (*UserObject, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserObject)
	err := c.cc.Invoke(ctx, User_GetUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) SearchUserStream(ctx context.Context, in *UserNameRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[UserObject], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &User_ServiceDesc.Streams[0], User_SearchUserStream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[UserNameRequest, UserObject]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type User_SearchUserStreamClient = grpc.ServerStreamingClient[UserObject]

func (c *userClient) ListUsersStream(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (grpc.ServerStreamingClient[UserObject], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &User_ServiceDesc.Streams[1], User_ListUsersStream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[emptypb.Empty, UserObject]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type User_ListUsersStreamClient = grpc.ServerStreamingClient[UserObject]

func (c *userClient) ResetHardwareId(ctx context.Context, in *UserIdRequest, opts ...grpc.CallOption) (*StandardResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StandardResponse)
	err := c.cc.Invoke(ctx, User_ResetHardwareId_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) ResetPassword(ctx context.Context, in *UserIdRequest, opts ...grpc.CallOption) (*StandardResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StandardResponse)
	err := c.cc.Invoke(ctx, User_ResetPassword_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) BanUser(ctx context.Context, in *UserIdRequest, opts ...grpc.CallOption) (*StandardResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StandardResponse)
	err := c.cc.Invoke(ctx, User_BanUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) RevokeBan(ctx context.Context, in *UserIdRequest, opts ...grpc.CallOption) (*StandardResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StandardResponse)
	err := c.cc.Invoke(ctx, User_RevokeBan_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserServer is the server API for User service.
// All implementations must embed UnimplementedUserServer
// for forward compatibility.
type UserServer interface {
	CreateUser(context.Context, *UserCreateRequest) (*UserObject, error)
	GetUser(context.Context, *UserIdRequest) (*UserObject, error)
	SearchUserStream(*UserNameRequest, grpc.ServerStreamingServer[UserObject]) error
	ListUsersStream(*emptypb.Empty, grpc.ServerStreamingServer[UserObject]) error
	ResetHardwareId(context.Context, *UserIdRequest) (*StandardResponse, error)
	ResetPassword(context.Context, *UserIdRequest) (*StandardResponse, error)
	BanUser(context.Context, *UserIdRequest) (*StandardResponse, error)
	RevokeBan(context.Context, *UserIdRequest) (*StandardResponse, error)
	mustEmbedUnimplementedUserServer()
}

// UnimplementedUserServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedUserServer struct{}

func (UnimplementedUserServer) CreateUser(context.Context, *UserCreateRequest) (*UserObject, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedUserServer) GetUser(context.Context, *UserIdRequest) (*UserObject, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (UnimplementedUserServer) SearchUserStream(*UserNameRequest, grpc.ServerStreamingServer[UserObject]) error {
	return status.Errorf(codes.Unimplemented, "method SearchUserStream not implemented")
}
func (UnimplementedUserServer) ListUsersStream(*emptypb.Empty, grpc.ServerStreamingServer[UserObject]) error {
	return status.Errorf(codes.Unimplemented, "method ListUsersStream not implemented")
}
func (UnimplementedUserServer) ResetHardwareId(context.Context, *UserIdRequest) (*StandardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetHardwareId not implemented")
}
func (UnimplementedUserServer) ResetPassword(context.Context, *UserIdRequest) (*StandardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetPassword not implemented")
}
func (UnimplementedUserServer) BanUser(context.Context, *UserIdRequest) (*StandardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BanUser not implemented")
}
func (UnimplementedUserServer) RevokeBan(context.Context, *UserIdRequest) (*StandardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RevokeBan not implemented")
}
func (UnimplementedUserServer) mustEmbedUnimplementedUserServer() {}
func (UnimplementedUserServer) testEmbeddedByValue()              {}

// UnsafeUserServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserServer will
// result in compilation errors.
type UnsafeUserServer interface {
	mustEmbedUnimplementedUserServer()
}

func RegisterUserServer(s grpc.ServiceRegistrar, srv UserServer) {
	// If the following call pancis, it indicates UnimplementedUserServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&User_ServiceDesc, srv)
}

func _User_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_CreateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).CreateUser(ctx, req.(*UserCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_GetUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).GetUser(ctx, req.(*UserIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_SearchUserStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(UserNameRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(UserServer).SearchUserStream(m, &grpc.GenericServerStream[UserNameRequest, UserObject]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type User_SearchUserStreamServer = grpc.ServerStreamingServer[UserObject]

func _User_ListUsersStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(emptypb.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(UserServer).ListUsersStream(m, &grpc.GenericServerStream[emptypb.Empty, UserObject]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type User_ListUsersStreamServer = grpc.ServerStreamingServer[UserObject]

func _User_ResetHardwareId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).ResetHardwareId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_ResetHardwareId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).ResetHardwareId(ctx, req.(*UserIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_ResetPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).ResetPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_ResetPassword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).ResetPassword(ctx, req.(*UserIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_BanUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).BanUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_BanUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).BanUser(ctx, req.(*UserIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_RevokeBan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).RevokeBan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_RevokeBan_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).RevokeBan(ctx, req.(*UserIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// User_ServiceDesc is the grpc.ServiceDesc for User service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var User_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protofiles.User",
	HandlerType: (*UserServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateUser",
			Handler:    _User_CreateUser_Handler,
		},
		{
			MethodName: "GetUser",
			Handler:    _User_GetUser_Handler,
		},
		{
			MethodName: "ResetHardwareId",
			Handler:    _User_ResetHardwareId_Handler,
		},
		{
			MethodName: "ResetPassword",
			Handler:    _User_ResetPassword_Handler,
		},
		{
			MethodName: "BanUser",
			Handler:    _User_BanUser_Handler,
		},
		{
			MethodName: "RevokeBan",
			Handler:    _User_RevokeBan_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SearchUserStream",
			Handler:       _User_SearchUserStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListUsersStream",
			Handler:       _User_ListUsersStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "user.proto",
}
