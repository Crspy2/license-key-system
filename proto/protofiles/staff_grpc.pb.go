// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.3
// source: staff.proto

package protofiles

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Staff_ApproveStaff_FullMethodName          = "/protofiles.Staff/ApproveStaff"
	Staff_GetStaff_FullMethodName              = "/protofiles.Staff/GetStaff"
	Staff_GetAllStaffStream_FullMethodName     = "/protofiles.Staff/GetAllStaffStream"
	Staff_SetStaffPermissions_FullMethodName   = "/protofiles.Staff/SetStaffPermissions"
	Staff_AddStaffPermission_FullMethodName    = "/protofiles.Staff/AddStaffPermission"
	Staff_RemoveStaffPermission_FullMethodName = "/protofiles.Staff/RemoveStaffPermission"
)

// StaffClient is the client API for Staff service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StaffClient interface {
	ApproveStaff(ctx context.Context, in *StaffId, opts ...grpc.CallOption) (*ApprovalResponse, error)
	GetStaff(ctx context.Context, in *StaffId, opts ...grpc.CallOption) (*StaffObject, error)
	GetAllStaffStream(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (grpc.ServerStreamingClient[StaffObject], error)
	SetStaffPermissions(ctx context.Context, in *MultiPermissionRequest, opts ...grpc.CallOption) (*StandardResponse, error)
	AddStaffPermission(ctx context.Context, in *SinglePermissionRequest, opts ...grpc.CallOption) (*StandardResponse, error)
	RemoveStaffPermission(ctx context.Context, in *SinglePermissionRequest, opts ...grpc.CallOption) (*StandardResponse, error)
}

type staffClient struct {
	cc grpc.ClientConnInterface
}

func NewStaffClient(cc grpc.ClientConnInterface) StaffClient {
	return &staffClient{cc}
}

func (c *staffClient) ApproveStaff(ctx context.Context, in *StaffId, opts ...grpc.CallOption) (*ApprovalResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApprovalResponse)
	err := c.cc.Invoke(ctx, Staff_ApproveStaff_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *staffClient) GetStaff(ctx context.Context, in *StaffId, opts ...grpc.CallOption) (*StaffObject, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StaffObject)
	err := c.cc.Invoke(ctx, Staff_GetStaff_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *staffClient) GetAllStaffStream(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (grpc.ServerStreamingClient[StaffObject], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Staff_ServiceDesc.Streams[0], Staff_GetAllStaffStream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[emptypb.Empty, StaffObject]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Staff_GetAllStaffStreamClient = grpc.ServerStreamingClient[StaffObject]

func (c *staffClient) SetStaffPermissions(ctx context.Context, in *MultiPermissionRequest, opts ...grpc.CallOption) (*StandardResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StandardResponse)
	err := c.cc.Invoke(ctx, Staff_SetStaffPermissions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *staffClient) AddStaffPermission(ctx context.Context, in *SinglePermissionRequest, opts ...grpc.CallOption) (*StandardResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StandardResponse)
	err := c.cc.Invoke(ctx, Staff_AddStaffPermission_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *staffClient) RemoveStaffPermission(ctx context.Context, in *SinglePermissionRequest, opts ...grpc.CallOption) (*StandardResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StandardResponse)
	err := c.cc.Invoke(ctx, Staff_RemoveStaffPermission_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StaffServer is the server API for Staff service.
// All implementations must embed UnimplementedStaffServer
// for forward compatibility.
type StaffServer interface {
	ApproveStaff(context.Context, *StaffId) (*ApprovalResponse, error)
	GetStaff(context.Context, *StaffId) (*StaffObject, error)
	GetAllStaffStream(*emptypb.Empty, grpc.ServerStreamingServer[StaffObject]) error
	SetStaffPermissions(context.Context, *MultiPermissionRequest) (*StandardResponse, error)
	AddStaffPermission(context.Context, *SinglePermissionRequest) (*StandardResponse, error)
	RemoveStaffPermission(context.Context, *SinglePermissionRequest) (*StandardResponse, error)
	mustEmbedUnimplementedStaffServer()
}

// UnimplementedStaffServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedStaffServer struct{}

func (UnimplementedStaffServer) ApproveStaff(context.Context, *StaffId) (*ApprovalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApproveStaff not implemented")
}
func (UnimplementedStaffServer) GetStaff(context.Context, *StaffId) (*StaffObject, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStaff not implemented")
}
func (UnimplementedStaffServer) GetAllStaffStream(*emptypb.Empty, grpc.ServerStreamingServer[StaffObject]) error {
	return status.Errorf(codes.Unimplemented, "method GetAllStaffStream not implemented")
}
func (UnimplementedStaffServer) SetStaffPermissions(context.Context, *MultiPermissionRequest) (*StandardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetStaffPermissions not implemented")
}
func (UnimplementedStaffServer) AddStaffPermission(context.Context, *SinglePermissionRequest) (*StandardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddStaffPermission not implemented")
}
func (UnimplementedStaffServer) RemoveStaffPermission(context.Context, *SinglePermissionRequest) (*StandardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveStaffPermission not implemented")
}
func (UnimplementedStaffServer) mustEmbedUnimplementedStaffServer() {}
func (UnimplementedStaffServer) testEmbeddedByValue()               {}

// UnsafeStaffServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StaffServer will
// result in compilation errors.
type UnsafeStaffServer interface {
	mustEmbedUnimplementedStaffServer()
}

func RegisterStaffServer(s grpc.ServiceRegistrar, srv StaffServer) {
	// If the following call pancis, it indicates UnimplementedStaffServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Staff_ServiceDesc, srv)
}

func _Staff_ApproveStaff_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StaffId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StaffServer).ApproveStaff(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Staff_ApproveStaff_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StaffServer).ApproveStaff(ctx, req.(*StaffId))
	}
	return interceptor(ctx, in, info, handler)
}

func _Staff_GetStaff_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StaffId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StaffServer).GetStaff(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Staff_GetStaff_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StaffServer).GetStaff(ctx, req.(*StaffId))
	}
	return interceptor(ctx, in, info, handler)
}

func _Staff_GetAllStaffStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(emptypb.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StaffServer).GetAllStaffStream(m, &grpc.GenericServerStream[emptypb.Empty, StaffObject]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Staff_GetAllStaffStreamServer = grpc.ServerStreamingServer[StaffObject]

func _Staff_SetStaffPermissions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MultiPermissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StaffServer).SetStaffPermissions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Staff_SetStaffPermissions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StaffServer).SetStaffPermissions(ctx, req.(*MultiPermissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Staff_AddStaffPermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SinglePermissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StaffServer).AddStaffPermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Staff_AddStaffPermission_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StaffServer).AddStaffPermission(ctx, req.(*SinglePermissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Staff_RemoveStaffPermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SinglePermissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StaffServer).RemoveStaffPermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Staff_RemoveStaffPermission_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StaffServer).RemoveStaffPermission(ctx, req.(*SinglePermissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Staff_ServiceDesc is the grpc.ServiceDesc for Staff service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Staff_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protofiles.Staff",
	HandlerType: (*StaffServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ApproveStaff",
			Handler:    _Staff_ApproveStaff_Handler,
		},
		{
			MethodName: "GetStaff",
			Handler:    _Staff_GetStaff_Handler,
		},
		{
			MethodName: "SetStaffPermissions",
			Handler:    _Staff_SetStaffPermissions_Handler,
		},
		{
			MethodName: "AddStaffPermission",
			Handler:    _Staff_AddStaffPermission_Handler,
		},
		{
			MethodName: "RemoveStaffPermission",
			Handler:    _Staff_RemoveStaffPermission_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetAllStaffStream",
			Handler:       _Staff_GetAllStaffStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "staff.proto",
}
